/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FeaturedService_H
#define FeaturedService_H

#include <TProcessor.h>
#include "featured_types.h"

namespace featured {

class FeaturedServiceIf {
 public:
  virtual ~FeaturedServiceIf() {}
  virtual void get_features(std::vector<std::string> & _return) = 0;
  virtual void select(std::vector<Item> & _return, const Select& select_query) = 0;
  virtual void shutdown() = 0;
  virtual void ping() = 0;
};

class FeaturedServiceIfFactory {
 public:
  typedef FeaturedServiceIf Handler;

  virtual ~FeaturedServiceIfFactory() {}

  virtual FeaturedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FeaturedServiceIf* /* handler */) = 0;
};

class FeaturedServiceIfSingletonFactory : virtual public FeaturedServiceIfFactory {
 public:
  FeaturedServiceIfSingletonFactory(const boost::shared_ptr<FeaturedServiceIf>& iface) : iface_(iface) {}
  virtual ~FeaturedServiceIfSingletonFactory() {}

  virtual FeaturedServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FeaturedServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FeaturedServiceIf> iface_;
};

class FeaturedServiceNull : virtual public FeaturedServiceIf {
 public:
  virtual ~FeaturedServiceNull() {}
  void get_features(std::vector<std::string> & /* _return */) {
    return;
  }
  void select(std::vector<Item> & /* _return */, const Select& /* select_query */) {
    return;
  }
  void shutdown() {
    return;
  }
  void ping() {
    return;
  }
};


class FeaturedService_get_features_args {
 public:

  FeaturedService_get_features_args() {
  }

  virtual ~FeaturedService_get_features_args() throw() {}


  bool operator == (const FeaturedService_get_features_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FeaturedService_get_features_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_get_features_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_get_features_pargs {
 public:


  virtual ~FeaturedService_get_features_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FeaturedService_get_features_result__isset {
  _FeaturedService_get_features_result__isset() : success(false) {}
  bool success;
} _FeaturedService_get_features_result__isset;

class FeaturedService_get_features_result {
 public:

  FeaturedService_get_features_result() {
  }

  virtual ~FeaturedService_get_features_result() throw() {}

  std::vector<std::string>  success;

  _FeaturedService_get_features_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const FeaturedService_get_features_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FeaturedService_get_features_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_get_features_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FeaturedService_get_features_presult__isset {
  _FeaturedService_get_features_presult__isset() : success(false) {}
  bool success;
} _FeaturedService_get_features_presult__isset;

class FeaturedService_get_features_presult {
 public:


  virtual ~FeaturedService_get_features_presult() throw() {}

  std::vector<std::string> * success;

  _FeaturedService_get_features_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FeaturedService_select_args__isset {
  _FeaturedService_select_args__isset() : select_query(false) {}
  bool select_query;
} _FeaturedService_select_args__isset;

class FeaturedService_select_args {
 public:

  FeaturedService_select_args() {
  }

  virtual ~FeaturedService_select_args() throw() {}

  Select select_query;

  _FeaturedService_select_args__isset __isset;

  void __set_select_query(const Select& val) {
    select_query = val;
  }

  bool operator == (const FeaturedService_select_args & rhs) const
  {
    if (!(select_query == rhs.select_query))
      return false;
    return true;
  }
  bool operator != (const FeaturedService_select_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_select_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_select_pargs {
 public:


  virtual ~FeaturedService_select_pargs() throw() {}

  const Select* select_query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FeaturedService_select_result__isset {
  _FeaturedService_select_result__isset() : success(false) {}
  bool success;
} _FeaturedService_select_result__isset;

class FeaturedService_select_result {
 public:

  FeaturedService_select_result() {
  }

  virtual ~FeaturedService_select_result() throw() {}

  std::vector<Item>  success;

  _FeaturedService_select_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const FeaturedService_select_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FeaturedService_select_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_select_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FeaturedService_select_presult__isset {
  _FeaturedService_select_presult__isset() : success(false) {}
  bool success;
} _FeaturedService_select_presult__isset;

class FeaturedService_select_presult {
 public:


  virtual ~FeaturedService_select_presult() throw() {}

  std::vector<Item> * success;

  _FeaturedService_select_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FeaturedService_shutdown_args {
 public:

  FeaturedService_shutdown_args() {
  }

  virtual ~FeaturedService_shutdown_args() throw() {}


  bool operator == (const FeaturedService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FeaturedService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_shutdown_pargs {
 public:


  virtual ~FeaturedService_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_ping_args {
 public:

  FeaturedService_ping_args() {
  }

  virtual ~FeaturedService_ping_args() throw() {}


  bool operator == (const FeaturedService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FeaturedService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_ping_pargs {
 public:


  virtual ~FeaturedService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_ping_result {
 public:

  FeaturedService_ping_result() {
  }

  virtual ~FeaturedService_ping_result() throw() {}


  bool operator == (const FeaturedService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FeaturedService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FeaturedService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FeaturedService_ping_presult {
 public:


  virtual ~FeaturedService_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FeaturedServiceClient : virtual public FeaturedServiceIf {
 public:
  FeaturedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FeaturedServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_features(std::vector<std::string> & _return);
  void send_get_features();
  void recv_get_features(std::vector<std::string> & _return);
  void select(std::vector<Item> & _return, const Select& select_query);
  void send_select(const Select& select_query);
  void recv_select(std::vector<Item> & _return);
  void shutdown();
  void send_shutdown();
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FeaturedServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<FeaturedServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (FeaturedServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get_features(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_select(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FeaturedServiceProcessor(boost::shared_ptr<FeaturedServiceIf> iface) :
    iface_(iface) {
    processMap_["get_features"] = &FeaturedServiceProcessor::process_get_features;
    processMap_["select"] = &FeaturedServiceProcessor::process_select;
    processMap_["shutdown"] = &FeaturedServiceProcessor::process_shutdown;
    processMap_["ping"] = &FeaturedServiceProcessor::process_ping;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~FeaturedServiceProcessor() {}
};

class FeaturedServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FeaturedServiceProcessorFactory(const ::boost::shared_ptr< FeaturedServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FeaturedServiceIfFactory > handlerFactory_;
};

class FeaturedServiceMultiface : virtual public FeaturedServiceIf {
 public:
  FeaturedServiceMultiface(std::vector<boost::shared_ptr<FeaturedServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FeaturedServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FeaturedServiceIf> > ifaces_;
  FeaturedServiceMultiface() {}
  void add(boost::shared_ptr<FeaturedServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_features(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_features(_return);
        return;
      } else {
        ifaces_[i]->get_features(_return);
      }
    }
  }

  void select(std::vector<Item> & _return, const Select& select_query) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->select(_return, select_query);
        return;
      } else {
        ifaces_[i]->select(_return, select_query);
      }
    }
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown();
    }
  }

  void ping() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

};

} // namespace

#endif
