/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "featured_types.h"

namespace featured {

const char* Item::ascii_fingerprint = "D532D9A2E8F3A7C0DF088B9D42C44294";
const uint8_t Item::binary_fingerprint[16] = {0xD5,0x32,0xD9,0xA2,0xE8,0xF3,0xA7,0xC0,0xDF,0x08,0x8B,0x9D,0x42,0xC4,0x42,0x94};

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->item_id);
          this->__isset.item_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->features.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              double& _val6 = this->features[_key5];
              xfer += iprot->readDouble(_val6);
            }
            iprot->readMapEnd();
          }
          this->__isset.features = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Item");
  xfer += oprot->writeFieldBegin("item_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->item_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("features", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->features.size()));
    std::map<std::string, double> ::const_iterator _iter7;
    for (_iter7 = this->features.begin(); _iter7 != this->features.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeDouble(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Filter::ascii_fingerprint = "BBD19E3475365A44E56C102645D1F2B2";
const uint8_t Filter::binary_fingerprint[16] = {0xBB,0xD1,0x9E,0x34,0x75,0x36,0x5A,0x44,0xE5,0x6C,0x10,0x26,0x45,0xD1,0xF2,0xB2};

uint32_t Filter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_feature = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feature);
          isset_feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->coefficient);
          this->__isset.coefficient = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->upper_bound);
          this->__isset.upper_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lower_bound);
          this->__isset.lower_bound = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_feature)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Filter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Filter");
  xfer += oprot->writeFieldBegin("feature", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->feature);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.coefficient) {
    xfer += oprot->writeFieldBegin("coefficient", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->coefficient);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upper_bound) {
    xfer += oprot->writeFieldBegin("upper_bound", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->upper_bound);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lower_bound) {
    xfer += oprot->writeFieldBegin("lower_bound", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->lower_bound);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Select::ascii_fingerprint = "16D2D6F84E1846A93F12E0482A140D8A";
const uint8_t Select::binary_fingerprint[16] = {0x16,0xD2,0xD6,0xF8,0x4E,0x18,0x46,0xA9,0x3F,0x12,0xE0,0x48,0x2A,0x14,0x0D,0x8A};

uint32_t Select::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filters.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            iprot->readListBegin(_etype11, _size8);
            this->filters.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->filters[_i12].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.filters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_by_feature);
          this->__isset.order_by_feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->order_by_direction);
          this->__isset.order_by_direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->limit);
          this->__isset.limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Select::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Select");
  xfer += oprot->writeFieldBegin("filters", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->filters.size()));
    std::vector<Filter> ::const_iterator _iter13;
    for (_iter13 = this->filters.begin(); _iter13 != this->filters.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  if (this->__isset.order_by_feature) {
    xfer += oprot->writeFieldBegin("order_by_feature", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->order_by_feature);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("order_by_direction", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->order_by_direction);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("limit", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->limit);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
